module parameters

    use constants
    implicit none

#ifdef MPIP
    include "mpif.h"
#endif
                                              !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    integer, parameter  :: LB = BC_OUTFLOW    !!                           Boundaries                           !!
    integer, parameter  :: RB = BC_OUTFLOW    !!  LB = Left Boundary   DB = Down Boundary  FB = Front Boundary  !!
    integer, parameter  :: TB = BC_OUTFLOW    !!  RB = Right Boundary  TB = Top Boundary   BB = Back Boundary   !!
    integer, parameter  :: DB = BC_OUTFLOW    !!           (x)                 (y)                  (z)         !!
    integer, parameter  :: FB = BC_OUTFLOW    !!                        Type of boundary                        !!
    integer, parameter  :: BB = BC_OUTFLOW    !!  1 = Outflow    2 = Reflective    3 = Periodic    4 = Inflow   !!
                                              !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    integer, parameter  :: limtr = LIMITER_VANLEER  !! Limiter

    integer, parameter  :: ndim = 3
    integer, parameter  :: neq = 5
    integer, parameter  :: size = 6
    integer, parameter  :: nxtot = 4*2**size
    integer, parameter  :: nytot = 4*2**size
    integer, parameter  :: nztot = 4*2**size
    integer, parameter  :: choice = 1

    integer, parameter      :: num_out = 100
    integer, parameter      :: outfile = VTK
    character(*), parameter :: outputpath = '/storage5/luis.arcos/out75SG/'
#ifdef COOL
    character(*), parameter :: cooling_file = '../Z1.0.dat'
#endif
    character(*), parameter :: posfile = '/storage5/luis.arcos/25SG/posest75.dat'
    integer, parameter      :: nghost = 2   !! Order

    real, parameter  :: xl = -0.6*PC
    real, parameter  :: xr = 0.6*PC
    real, parameter  :: yl = -0.6*PC
    real, parameter  :: yr = 0.6*PC
    real, parameter  :: zl = -0.6*PC
    real, parameter  :: zr = 0.6*PC
    real, parameter  :: gamma = 5.0/3.0
    real, parameter  :: mu0 = 1.0
    real, parameter  :: Gconst = GR            !! Gravitational constant. If using physical units, GR = 
    real, parameter  :: cfl = 0.8
    real, parameter  :: eta = 0.1e-5
    real, parameter  :: tfin = 1.9e5*YEAR
    real, parameter  :: cooling_limit = 0.5

#ifdef MPIP
    integer, parameter  :: mpix = 4
    integer, parameter  :: mpiy = 4
    integer, parameter  :: mpiz = 4
    integer, parameter  :: np = mpix*mpiy*mpiz
    integer, parameter  :: nx = nxtot/mpix
    integer, parameter  :: ny = nytot/mpiy
    integer, parameter  :: nz = nztot/mpiz
#else
    integer, parameter  :: mpix = 1
    integer, parameter  :: mpiy = 1
    integer, parameter  :: mpiz = 1
    integer, parameter  :: nx = nxtot
    integer, parameter  :: ny = nytot
    integer, parameter  :: nz = nztot
    integer, parameter  :: np = 1
#endif

#ifdef MPIP
#ifdef DOUBLEP
    integer, parameter :: mpi_real_kind=mpi_real8
#else
    integer, parameter :: mpi_real_kind=mpi_real4
#endif
#else
    integer, parameter :: mpi_real_kind=0
#endif

    real, parameter  :: dtout = tfin/num_out

    integer, parameter  :: nxmax = nx+nghost
    integer, parameter  :: nymax = ny+nghost
    integer, parameter  :: nzmax = nz+nghost

    integer, parameter  :: nxmin = 1-nghost
    integer, parameter  :: nymin = 1-nghost
    integer, parameter  :: nzmin = 1-nghost

    real, parameter     :: dx = (xr-xl)/nxtot
    real, parameter     :: dy = (yr-yl)/nytot
    real, parameter     :: dz = (zr-zl)/nztot
#ifdef GRAV
#ifdef MPIP
    integer, parameter  :: lvlm = size!size - log(real(np))/log(2.0)
#else
    integer, parameter  :: lvlm = size
#endif
#endif
    logical, parameter      :: logged = .true.
    integer, parameter      :: logu = 12
    character(*), parameter :: logfile='./log125SGG.dat'
end module parameters
